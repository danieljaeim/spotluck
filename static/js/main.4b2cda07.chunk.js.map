{"version":3,"sources":["Components/Thumbnail.js","Components/Preference.js","Components/SearchModal.js","Components/PreferenceBar.js","Components/ChosenPreferences.js","Components/Success.js","Components/CurrentTrack.js","Components/Navbar.js","Components/Landing.js","Components/Agreement.js","Components/App.js","serviceWorker.js","index.js"],"names":["Thumbnail","this","props","tracks","newartisttracks","sortByNew","token","updateSortByNew","queueUpSongs","callForRecommend","playSpecificSong","updateHoveredObj","lockSpecificTrack","select","chosentracks","hoverIndex","className","map","track","i","key","data-sample-uri","preview_url","onMouseLeave","e","onMouseEnter","aria-hidden","onClick","uri","name","alt","src","album","images","url","style","borderTop","indexOf","slice","artists","popularity","class","_","borderRadius","Component","ChosenPreferences","slide","y","openingMenu","currentRelatedArtists","slider","slickNext","slickPrev","addWheelListener","wheelDelta","updateSearchTerm","searchTerm","target","value","setState","currentSearchTerm","clearTimeout","state","timer","setTimerToCallApi","setTimeout","a","searchForSpecificQuery","searchString","encodeURIComponent","axios","get","headers","response","data","items","filter","artist","sort","b","seenAlbums","albums","ret","album_type","lengthOfArtistsFound","length","showSearchModal","alreadyMoved","width","height","endChosenModal","openedSearch","showingData","swappingArtistHover","arrows","nextArrow","prevArrow","window","addEventListener","removeEventListener","updateWindowDimensions","preferences","changingPreferenceIndex","playSpecificArtist","updateMenu","updatePreference","setupPreference","atLeastOne","settings","accessibility","centerMode","variableWidth","centerPadding","infinite","slidesToShow","slidesToScroll","initialSlide","speed","paddingTop","color","onChange","preventDefault","onFocus","id","placeholder","document","getElementById","num","left","background","animationDelay","Math","abs","type","fontSize","top","right","ref","onMouseOver","Success","componentDidMount","callSpotifyApi","limit","playlistids","pl","count","playlist_res","added_at","0","1","2","3","4","relatedArtists","copyTracks","forEach","val","push","selectArr","Array","fill","tracksLeft","seedBase","seedArtist","seedTrack","changed","recRequestURL","seed_response","artistNames","some","t","localeCompare","sortByNewTracks","tracklisturi","updateSelectedTrack","selectedTrack","updateSearchSeed","seedStr","searchSeed","index","objData","sample_uri","currentTarget","dataset","sampleUri","img","children","currentSrc","trackName","textContent","artistName","hovering","updateTimeRange","time_range","updateHoverUri","preferenceObject","indexToReplace","st","put","currentPlaying","songname","selectCopy","recSeed","thumbnailOn","itemToSwap","clickToSelect","showThumb","deviceId","changePlayerSettings","zIndex","CurrentTrack","millisToMinutesAndSeconds","millis","minutes","floor","seconds","toFixed","changeCurrentTrackTime","curTrack","playing","track_window","current_track","position","min","max","duration","Navbar","Landing","search","location","hash","queryString","parse","access_token","validateLogin","readyToRedirect","to","Agreement","scopes","href","App","checkPlayerInterval","loggedIn","playerCheckInterval","setInterval","checkForPlayer","Spotify","clearInterval","player","Player","getOAuthToken","cb","volume","on","console","error","device_id","log","setVolume","premium","transferPlaybackHere","connect","then","success","control","pause","togglePlay","nextTrack","previousTrack","seek","getPlayerState","getCurrentState","validateLogIn","validated","redirect","fetch","method","authorization","body","JSON","stringify","path","React","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4b2cda07.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport '../StyleSheets/Success.css';\r\nimport '../StyleSheets/Thumbnail.css';\r\n\r\nexport default class Thumbnail extends Component {\r\n\r\n    render() {\r\n        const { tracks, newartisttracks, token, sortByNew, updateSortByNew, queueUpSongs, \r\n            callForRecommend, playSpecificSong, updateHoveredObj, lockSpecificTrack, select, hoverIndex } = this.props;\r\n\r\n        let chosentracks = sortByNew ? newartisttracks : tracks; \r\n\r\n        return (\r\n            <span className=\"thumbnail-container\">\r\n                <span className=\"thumbnail-filter\">\r\n                    <span className=\"filter-by-title\">\r\n                        <span className=\"filter-title-text\">\r\n                            Title\r\n                        </span>\r\n                    </span>\r\n                    <span className=\"filter-by-artist\">\r\n                        <span className='filter-artist-text'>\r\n                            Artist\r\n                        </span>\r\n                    </span>\r\n                    <span className=\"filter-by-sort\">\r\n                        <span className='filter-sort-text'>\r\n                            Popularity\r\n                        </span>\r\n                    </span>\r\n                </span>\r\n                <div className=\"tracklist\">\r\n                    {chosentracks ? chosentracks.map((track, i) =>\r\n                        <div className='trackStyle'\r\n                            key={i}\r\n                            data-sample-uri={track.preview_url}\r\n                            onMouseLeave={e => updateHoveredObj(null)}\r\n                            onMouseEnter={e => updateHoveredObj(e, i)}\r\n                        >\r\n                            {/* <span className=\"track_number\"> {i + 1}. </span> */}\r\n                            <div className=\"name_artist_container\">\r\n                                <div className=\"img-hover\">\r\n                                    <i className=\"fa fa-play-circle\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                </div>\r\n                                <img className='imageStyle'\r\n                                    onClick={() => playSpecificSong(track.uri, track.name)}\r\n                                    alt=\"\"\r\n                                    src={`${track.album.images[2].url}`}\r\n                                />\r\n                                <span className=\"underline-area\"\r\n                                    style={{ borderTop: i > 0 ? (select[i - 1]) ? '1px #E36588 solid' : '1px #82A6B1 solid' : 'none' }}\r\n                                >\r\n                                    <h4 className='track_name'>\r\n                                        {track.name.indexOf('(') === -1 ? track.name : track.name.slice(0, track.name.indexOf('('))} </h4>\r\n                                    <span className=\"artist_name\">\r\n                                        {track.artists[0].name}\r\n                                    </span>\r\n                                    <span className=\"track-popularity\">\r\n                                        {track.popularity}\r\n                                    </span>\r\n                                </span>\r\n                            </div>\r\n                            <span className=\"bookmark_button\"\r\n                                onClick={() => lockSpecificTrack(i)}>\r\n                                {select[i] ? <i class=\"fa lock-button fa-lock fa-2x\" aria-hidden=\"true\"></i> : null}\r\n                                {!select[i] ? <i class=\"fa lock-button fa-unlock fa-2x\" aria-hidden=\"true\"></i> : null}\r\n                            </span>\r\n                        </div>) : null}\r\n                </div>\r\n                <div className=\"tracks-edit\">\r\n                    <div className=\"add-playlist-button\">\r\n                    </div>\r\n                    <div className=\"refresh-tracks-button\"\r\n                        onClick={_ => callForRecommend()}>\r\n                        <i class=\"fa fa-refresh\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"play-playlist-button\"\r\n                        onClick={_ => queueUpSongs()}>\r\n                        <i class=\"fa fa-play-circle-o\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"edit-settings\">\r\n                        <span className=\"check-new-artists\">\r\n                            <div className=\"new-artist\" \r\n                                name=\"new-artist\" \r\n                                style={{ borderRadius: sortByNew ? \"25%\" : \"50%\"}}\r\n                                onClick={_ => updateSortByNew()}>\r\n                                {sortByNew ?\r\n                                    <i className=\"fa fa-check-square\" aria-hidden=\"true\" /> :\r\n                                    <i className=\"fa fa-times-circle\" aria-hidden=\"true\" />\r\n                                }\r\n                            </div>\r\n                            <span className=\"new-artist-label\"> Prioritize new artists </span>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                {/* {hovering ? <InfoScreen changePlayerSettings={changePlayerSettings} deviceId={deviceId} hovering={hovering} /> : null} */}\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport '../StyleSheets/Preference.css';\r\n\r\nexport default class Preference extends Component {\r\n    render() {\r\n\r\n        const { pref, ranking, setupPreference} = this.props;\r\n        return (\r\n            pref.data ? \r\n            <div key={pref.data.name} \r\n                 className=\"preference-container\" \r\n                 style={{borderBottom: ( ranking > 0 && ranking < 5) ? '1px black solid' : '' }} \r\n                 onClick={() => setupPreference}>\r\n                <img className=\"preference-img\" src={pref.type === 'artist' ? pref.data.images[1].url : pref.data.album.images[1].url} alt=\"\"></img>\r\n                <span className=\"preference-name\">{pref.data.name}</span>\r\n            </div> : null\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport '../StyleSheets/SearchModal.css';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nexport default class SearchModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchTerm: '',\r\n            data: null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { preferences, data, setupPreference, changingPreferenceIndex, updatePreference } = this.props;\r\n\r\n        let atLeastOne = preferences[0] || preferences[1] ||\r\n            preferences[2] || preferences[3] || preferences[4];\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"artist-image-list-search\">\r\n                    {atLeastOne ? [0, 1, 2, 3, 4].map((num, i) =>\r\n                        <div key={preferences[i].data.id}\r\n                            onMouseDown={(e) => setupPreference(num)}>\r\n                            <img\r\n                                style={{\r\n                                    opacity: changingPreferenceIndex === num ? 0.5 : 1,\r\n                                    borderRadius: (preferences[num].type === 'artist' ? '38px' : '5px')\r\n                                }}\r\n                                className=\"artist-image-ins-search\"\r\n                                src={preferences[num].type === 'artist' ?\r\n                                    preferences[num].data.images[1].url :\r\n                                    preferences[num].data.album.images[1].url} alt=\"\"\r\n                            />\r\n                            <span className=\"artist-image-name-search\" style={{ left: `${155 * i + 30}px` }}> {preferences[num].data.name} </span>\r\n                        </div>)\r\n                        : null}\r\n                </div>\r\n                <div className=\"track-artist-title-container\">\r\n                    <div className=\"artists-title\"> Artists </div>\r\n                    <div className=\"tracks-title\"> Tracks </div>\r\n                </div>\r\n                <div className=\"search-modal-container\">\r\n                    {data ?\r\n                        <div>\r\n                            {data.artists.items ? <div className=\"artist-list-search\">\r\n                                {data.artists.items.map((artist, i) =>\r\n                                    artist.images[2] && (i < 10) ?\r\n                                        <div className=\"artist-list-item\"\r\n                                            onClick={() => updatePreference(artist, 'artist')}>\r\n                                            <img className=\"artist-img\" src={artist.images[2].url} alt=\"\" />\r\n                                            <div className=\"artist-name\"> {artist.name} </div>\r\n                                        </div>\r\n                                        : null)\r\n                                }\r\n                            </div> : null}\r\n                            {/* {data.albums.items ? <div className=\"album-list-search\">\r\n                            <div className=\"albums-title\"> Albums </div>\r\n                            {data.albums.items.map(album =>\r\n                                <span className=\"album-list-item\">\r\n                                    <img className=\"album-img\" src={album.images[2].url} alt=\"\" />\r\n                                    <div className=\"album-name\"> {album.name} </div>\r\n                                </span>\r\n                            )}\r\n                        </div> : null} */}\r\n                            {data.tracks.items ? <div className=\"track-list-search\">\r\n                                {data.tracks.items.map((track, i) =>\r\n                                    <span className=\"track-list-item\"\r\n                                        onClick={(e) => { e.preventDefault(); updatePreference(track, 'track') }}\r\n                                        style={{\r\n                                            visibility: (i === data.tracks.items.length - 1) ? 'hidden' : 'visible'\r\n                                        }}>\r\n                                        <img className=\"track-img\" src={track.album.images[2].url} alt=\"\" />\r\n                                        <div className=\"track-name\"> {track.name} </div>\r\n                                        <div className=\"track-artist\"> {track.artists[0].name} </div>\r\n                                    </span>\r\n                                )}\r\n                            </div> : null}\r\n                        </div> :\r\n                        <Spinner animation=\"border\" role=\"status\">\r\n                            <span className=\"sr-only\">Loading...</span>\r\n                        </Spinner>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport '../StyleSheets/PreferenceBar.css';\r\nimport Preference from '../Components/Preference';\r\nimport SearchModal from '../Components/SearchModal';\r\n\r\nexport default class PreferenceBar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showSearchModal: false,\r\n            currentSearchTerm: '',\r\n            timer: null,\r\n            data: null\r\n        }\r\n    }\r\n\r\n    searchForSpecificQuery = async (searchString) => {\r\n        searchString = encodeURIComponent(searchString);\r\n        let response = await axios.get(`https://api.spotify.com/v1/search?q=${searchString}&type=artist,track,album`,\r\n            {\r\n                headers: {\r\n                    'Authorization': \"Bearer \" + this.props.token,\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n        let data = response.data;\r\n        if (data.artists) {\r\n            data.artists.items.sort((a, b) => b.popularity - a.popularity);\r\n        }\r\n\r\n        let seenAlbums = {};\r\n        if (data.albums) {\r\n            let ret = data.albums.items.filter(album => {\r\n                if (album.album_type === \"single\") return false;\r\n                if (seenAlbums[album.name]) return false;\r\n                seenAlbums[album.name] = true;\r\n                return true;\r\n            });\r\n            data.albums.items = ret;\r\n        }\r\n\r\n        this.setState({ data });\r\n    }\r\n\r\n    turnModalOn = (bool) => {\r\n        if (bool === undefined) {\r\n            this.setState(st => ({ showSearchModal: !st.showSearchModal }));\r\n        } else {\r\n            this.setState({ showSearchModal: bool });\r\n        }\r\n    }\r\n\r\n    updateSearchTerm = (e) => {\r\n        let searchTerm = e.target.value;\r\n        this.setState({ currentSearchTerm: searchTerm });\r\n        clearTimeout(this.state.timer);\r\n\r\n        if (searchTerm === '' || searchTerm === this.state.currentSearchTerm) return;\r\n        let timer = this.setTimerToCallApi();\r\n        this.setState({ timer });\r\n    }\r\n\r\n    setTimerToCallApi = () => {\r\n        let timer = setTimeout(async () => {\r\n            let { currentSearchTerm } = this.state;\r\n            await this.searchForSpecificQuery(currentSearchTerm);\r\n        }, 1000);\r\n\r\n        return timer;\r\n    }\r\n\r\n    render() {\r\n        const { preferences, token, updatePreference, setupPreference,\r\n            changingPreferenceIndex } = this.props;\r\n        let { data } = this.state;\r\n\r\n        return (\r\n            <div className=\"searchmodal-container\"\r\n                tabIndex=\"0\"\r\n                onBlur={() => this.turnModalOn(true)}>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component, useRef } from 'react';\r\nimport Slider from 'react-slick';\r\nimport axios from 'axios';\r\nimport '../StyleSheets/ChosenPreferences.css';\r\nimport 'slick-carousel/slick/slick-theme.css';\r\nimport 'slick-carousel/slick/slick.css';\r\n\r\nexport default class ChosenPreferences extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showSearchModal: false,\r\n            currentSearchTerm: '',\r\n            alreadyMoved: false,\r\n            timer: null,\r\n            data: null,\r\n            width: 0,\r\n            height: 0,\r\n            endChosenModal: false,\r\n            openedSearch: false,\r\n            lengthOfArtistsFound: 20,\r\n            showingData: false,\r\n            swappingArtistHover: false,\r\n            arrows: true,\r\n            nextArrow: null,\r\n            prevArrow: null\r\n        }\r\n    }\r\n\r\n    slide = (y) => {\r\n        if (!this.props.openingMenu || !this.props.currentRelatedArtists) return;\r\n        y > 0 ? (\r\n            this.slider.slickNext()\r\n        ) : (\r\n                this.slider.slickPrev()\r\n            )\r\n    }\r\n\r\n    componentWillMount() {\r\n        window.addEventListener('wheel', this.addWheelListener);\r\n    }\r\n\r\n    addWheelListener = (e) => {\r\n        this.slide(e.wheelDelta);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    updateSearchTerm = (e) => {\r\n        let searchTerm = e.target.value;\r\n        this.setState({ currentSearchTerm: searchTerm });\r\n        clearTimeout(this.state.timer);\r\n\r\n        if (searchTerm === '' || searchTerm === this.state.currentSearchTerm) return;\r\n        let timer = this.setTimerToCallApi();\r\n        this.setState({ timer });\r\n    }\r\n\r\n    setTimerToCallApi = () => {\r\n        let timer = setTimeout(async () => {\r\n            let { currentSearchTerm } = this.state;\r\n            await this.searchForSpecificQuery(currentSearchTerm);\r\n        }, 1000);\r\n\r\n        return timer;\r\n    }\r\n\r\n    searchForSpecificQuery = async (searchString) => {\r\n        searchString = encodeURIComponent(searchString);\r\n        let response = await axios.get(`https://api.spotify.com/v1/search?q=${searchString}&type=artist,track,album`,\r\n            {\r\n                headers: {\r\n                    'Authorization': \"Bearer \" + this.props.token,\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n        let data = response.data;\r\n        if (data.artists) {\r\n            data.artists.items.filter(artist => artist.images[0])\r\n            data.artists.items.sort((a, b) => b.popularity - a.popularity);\r\n        }\r\n\r\n        let seenAlbums = {};\r\n        if (data.albums) {\r\n            let ret = data.albums.items.filter(album => {\r\n                if (album.album_type === \"single\") return false;\r\n                if (seenAlbums[album.name]) return false;\r\n                seenAlbums[album.name] = true;\r\n                return true;\r\n            });\r\n            data.albums.items = ret;\r\n        }\r\n\r\n        this.setState({ data, lengthOfArtistsFound: data.artists.items.length });\r\n    }\r\n\r\n\r\n    render() {\r\n        let { preferences, changingPreferenceIndex, playSpecificArtist,\r\n            updateMenu, updatePreference, setupPreference, currentRelatedArtists, openingMenu } = this.props;\r\n        let { data, lengthOfArtistsFound, showingData } = this.state;\r\n\r\n        let atLeastOne = preferences[0] || preferences[1] ||\r\n            preferences[2] || preferences[3] || preferences[4];\r\n\r\n        const settings = {\r\n            accessibility: true,\r\n            centerMode: false,\r\n            variableWidth: true,\r\n            centerPadding: '64px',\r\n            infinite: lengthOfArtistsFound > 4 && showingData,\r\n            slidesToShow: 1,\r\n            slidesToScroll: 2,\r\n            initialSlide: 0,\r\n            speed: 700\r\n        };\r\n\r\n        return (\r\n            <div className=\"chosen-container\">\r\n                <div className=\"info-div\" style={{ paddingTop: changingPreferenceIndex ? 'none' : '60px' }}>\r\n                    {changingPreferenceIndex !== null ?\r\n                        <div className=\"search-modal\">\r\n                            <div className=\"intro-search-modal\">\r\n                                <div className=\"add-button-intro\">\r\n                                    <i style={{ color: this.state.showingData ? 'grey' : 'grey' }} className=\"fa fa-search intro-bar\" />\r\n                                </div>\r\n                                <input\r\n                                    onChange={e => { e.preventDefault(); this.updateSearchTerm(e) }}\r\n                                    onFocus={e => { e.preventDefault(); this.setState({ showingData: true }) }}\r\n                                    className=\"add-text-intro\"\r\n                                    id=\"input-text\"\r\n                                    value={this.state.currentSearchTerm}\r\n                                    placeholder={`Search for an artist`}>\r\n                                </input>\r\n                                {this.state.showingData && this.state.currentSearchTerm ?\r\n                                    <i className=\"fa fa-times fa-lg\"\r\n                                        onClick={e => { e.preventDefault(); document.getElementById('input-text').value = \"\"; this.setState({ showingData: false, currentSearchTerm: '', data: null }) }} />\r\n                                    : null\r\n                                }\r\n                            </div>\r\n                            <div className=\"search-button-modal\">\r\n                                <div className={`generate-button ${changingPreferenceIndex !== null ? 'move-button-down-anim' : ''}`}\r\n                                    onClick={() => { window.removeEventListener('wheel', this.addWheelListener); updateMenu() }}>\r\n                                    Generate Playlist\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        :\r\n                        <span className=\"info-span\"> Here are some artists you enjoy.\r\n                        <span className=\"spotify-text\"> </span> <br />\r\n                            <span> <span style={{ color: '#E36588' }}> Click </span>\r\n                            and <span style={{ color: 'sandybrown' }}> swap </span>\r\n                            out artists.\r\n                        </span>\r\n                        </span>}\r\n                </div>\r\n                <div className=\"artist-image-list\">\r\n                    {atLeastOne ? [0, 1, 2, 3, 4].map((num, i) =>\r\n                        <span\r\n                            key={preferences[i].data.id}\r\n                            className={`artist-box-container \r\n                            ${changingPreferenceIndex !== null ?\r\n                                    changingPreferenceIndex === num ? `${this.props.openingMenu ? 'move-into-place-anim' : 'move-out-of-way-anim'}` :\r\n                                        `${changingPreferenceIndex === 3 && i === 2 ? `${this.props.openingMenu ? 'move-out-middle-right' : 'move-out-of-way-anim'}` :\r\n                                            changingPreferenceIndex === 1 && i === 2 ? `${this.props.openingMenu ? 'move-out-middle-left' : 'move-out-of-way-anim'}` :\r\n                                                changingPreferenceIndex === 0 && i === 2 ? `${this.props.openingMenu ? 'move-out-middle-left-far' : 'move-out-of-way-anim'}` :\r\n                                                    changingPreferenceIndex === 4 && i === 2 ? `${this.props.openingMenu ? 'move-out-middle-right-far' : 'move-out-of-way-anim'}` :\r\n                                                        'move-out-of-way-anim'}` : ''} `}\r\n                            style={{\r\n                                left: `${-3 + 24 * i}%`, background: changingPreferenceIndex !== null ? 'linear-gradient(90deg, rgba(255,184,92,1) 0%, rgba(227,101,136,1) 75%)' : '',\r\n                                animationDelay: changingPreferenceIndex === null ? Math.abs(2 - i) * 325 + 'ms' : null\r\n                            }}>\r\n                            {preferences[num] ?\r\n                                <div\r\n                                    key={preferences[num].name}\r\n                                    onClick={(e) => setupPreference(num)}>\r\n                                    {this.state.swappingArtistHover && num === changingPreferenceIndex ?\r\n                                        <i class=\"fa fa-arrow-circle-down\" aria-hidden=\"true\" /> : null}\r\n                                    <img className=\"artist-image-ins\"\r\n                                        src={preferences[num].type === 'artist' ?\r\n                                            preferences[num].data.images[2].url :\r\n                                            preferences[num].data.album.images[2].url}\r\n                                        alt=\"\"\r\n                                    />\r\n                                    <span className=\"artist-image-name\"\r\n                                        style={{\r\n                                            fontSize: changingPreferenceIndex !== null ? changingPreferenceIndex === i ? '20px' : '15px' : '',\r\n                                            top: changingPreferenceIndex !== null ? changingPreferenceIndex === i ? '170px' : '115px' : '',\r\n                                            right: changingPreferenceIndex !== null ? changingPreferenceIndex === i ? '25px' : '-20px' : '',\r\n                                            width: changingPreferenceIndex !== null ? changingPreferenceIndex === i ? '160px' : '100px' : ''\r\n                                        }}> {preferences[num].data.name} </span>\r\n                                </div> :\r\n                                <i className=\"fa fa-plus-square fa-5x\" aria-hidden=\"true\"></i>\r\n                            }\r\n                        </span>) : null}\r\n                </div>\r\n                {currentRelatedArtists !== null ?\r\n                    <div className=\"replace-artist-modal\">\r\n                        <Slider ref={slider => this.slider = slider} className=\"slider-container\" {...settings}>\r\n                            {data === null || !showingData ?\r\n                                currentRelatedArtists.map((artist, i) =>\r\n                                    <div key={artist.id}\r\n                                        className=\"related-artist\">\r\n                                        <div\r\n                                            onMouseOver={_ => { this.setState({ swappingArtistHover: true }) }}\r\n                                            onMouseLeave={_ => { this.setState({ swappingArtistHover: false }) }}\r\n                                            className=\"replace-div\">\r\n                                            <span className=\"swap-side\">\r\n                                                <i className=\"fa fa-circle\" style={{ color: 'white' }} />\r\n                                                <i className=\"fa fa-arrow-circle-up\"\r\n                                                    onClick={(e) => { e.preventDefault(); updatePreference(artist, 'artist') }}\r\n                                                    aria-hidden=\"true\" />\r\n                                            </span>\r\n                                            <span className=\"play-side\">\r\n                                                <i className=\"fa fa-play inner\" style={{ color: 'white' }}\r\n                                                    onClick={(e) => { e.preventDefault(); playSpecificArtist(artist.uri, artist.name) }}\r\n                                                    aria-hidden=\"true\" />\r\n                                                <i className=\"fa fa-play outer\" style={{ color: 'black' }} />\r\n                                            </span>\r\n                                        </div>\r\n                                        <img className=\"related-artist-img\" src={artist.images[2].url} alt=\"\">\r\n                                        </img>\r\n                                        <div className=\"related-artist-name\">\r\n                                            {artist.name}\r\n                                        </div>\r\n                                    </div>\r\n                                ) :\r\n                                data.artists.items.map((artist, i) => {\r\n                                    if (artist.images[0]) {\r\n                                        return (\r\n                                            <div key={artist.id}\r\n                                                className=\"related-artist\">\r\n                                                <div\r\n                                                    onMouseOver={_ => { this.setState({ swappingArtistHover: true }) }}\r\n                                                    onMouseLeave={_ => { this.setState({ swappingArtistHover: false }) }}\r\n                                                    className=\"replace-div\">\r\n                                                    <span className=\"swap-side\">\r\n                                                        <i className=\"fa fa-circle\" style={{ color: 'white' }} />\r\n                                                        <i className=\"fa fa-arrow-circle-up\"\r\n                                                            onClick={(e) => { e.preventDefault(); updatePreference(artist, 'artist') }}\r\n                                                            aria-hidden=\"true\" />\r\n                                                    </span>\r\n                                                    <span className=\"play-side\">\r\n                                                        <i className=\"fa fa-play inner\" style={{ color: 'white' }}\r\n                                                            onClick={(e) => { e.preventDefault(); playSpecificArtist(artist.uri, artist.name) }}\r\n                                                            aria-hidden=\"true\" />\r\n                                                        <i className=\"fa fa-play outer\" style={{ color: 'black' }} />\r\n                                                    </span>\r\n                                                </div>\r\n                                                <img className=\"related-artist-img\" src={artist.images[0].url} alt=\"\">\r\n                                                </img>\r\n                                                <div className=\"related-artist-name\">\r\n                                                    {artist.name}\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                            }\r\n                        </Slider>\r\n                    </div> : null}\r\n            </div >\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport '../StyleSheets/Success.css';\r\nimport Thumbnail from '../Components/Thumbnail';\r\nimport PreferenceBar from '../Components/PreferenceBar';\r\nimport ChosenPreferences from '../Components/ChosenPreferences';\r\n\r\nconst SEED_URI = \"https://api.spotify.com/v1/recommendations?\";\r\n\r\nexport default class Success extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            type: 'artists',\r\n            time_range: 'short_term',\r\n            limit: 5,\r\n            select: new Array(50).fill(false),\r\n            artists: null,\r\n            tracks: null,\r\n            newartisttracks: null,\r\n            recSeed: null,\r\n            thumbnailOn: true,\r\n            selectedTrack: null,\r\n            searchSeed: '',\r\n            hovering: null,\r\n            hoverIndex: null,\r\n            changingPreferenceIndex: null,\r\n            itemToSwap: null,\r\n            clickToSelect: false,\r\n            openingMenu: true,\r\n            showThumb: false,\r\n            currentRelatedArtists: null,\r\n            sortByNew: false,\r\n            tracklisturi: [],\r\n            preferences: {\r\n                0: null,\r\n                1: null,\r\n                2: null,\r\n                3: null,\r\n                4: null\r\n            },\r\n            relatedArtists: {\r\n                0: null,\r\n                1: null,\r\n                2: null,\r\n                3: null,\r\n                4: null\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        setTimeout(async () => {\r\n            await this.callSpotifyApi();\r\n        }, 50);\r\n    }\r\n\r\n    // let's just assume this only gets called when Success first mounts\r\n    callSpotifyApi = async () => {\r\n        const { limit } = this.state;\r\n\r\n        let preferences = {};\r\n\r\n        let response = await axios.get(`https://api.spotify.com/v1/me/top/artists?time_range=short_term&limit=${limit}&offset=0`, {\r\n            headers: {\r\n                'Authorization': \"Bearer \" + this.props.token,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        let artists = response.data.items;\r\n\r\n        if (artists.length !== 5) {\r\n            response = await axios.get(`https://api.spotify.com/v1/me/top/artists?time_range=medium_term&limit=5&offset=0`, {\r\n                headers: {\r\n                    'Authorization': \"Bearer \" + this.props.token,\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            artists = response.data.items;\r\n        }\r\n\r\n        if (artists.length !== 5) {\r\n            response = await axios.get(`https://api.spotify.com/v1/me/top/artists?time_range=long_term&limit=5&offset=0`, {\r\n                headers: {\r\n                    'Authorization': \"Bearer \" + this.props.token,\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            artists = response.data.items;\r\n        }\r\n\r\n        if (artists.length !== 5) {\r\n            response = await axios.get('https://api.spotify.com/v1/me/playlists', {\r\n                headers: {\r\n                    'Authorization': \"Bearer \" + this.props.token,\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            const playlistids = response.data.items.map(pl => pl.id);\r\n            let count = 0;\r\n            for (let id of playlistids) {\r\n                if (count >= 4) break;\r\n                const playlist_res = await axios.get(`https://api.spotify.com/v1/playlists/${id}/tracks`, {\r\n                    headers: {\r\n                        'Authorization': \"Bearer \" + this.props.token,\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                });\r\n\r\n                let data = playlist_res.data.items;\r\n                data.sort((a, b) => b.added_at - a.added_at)\r\n                for (let track of data) {\r\n                    if (count > 4) break;\r\n                    preferences[count] = { data: track.track, type: 'track' }\r\n                    count++;\r\n                }\r\n            }\r\n\r\n            preferences = {\r\n                0: { data: artists[0], type: 'track' },\r\n                1: { data: artists[1], type: 'track' },\r\n                2: { data: artists[2], type: 'track' },\r\n                3: { data: artists[3], type: 'track' },\r\n                4: { data: artists[4], type: 'track' },\r\n            }\r\n\r\n            this.setState({ artists, preferences });\r\n            await this.callForRecommend();\r\n            return;\r\n        }\r\n\r\n        preferences = {\r\n            0: { data: artists[0], type: 'artist' },\r\n            1: { data: artists[1], type: 'artist' },\r\n            2: { data: artists[2], type: 'artist' },\r\n            3: { data: artists[3], type: 'artist' },\r\n            4: { data: artists[4], type: 'artist' },\r\n        }\r\n\r\n        //adding related artists\r\n        let relatedArtists = {}\r\n        for (let i = 0; i < 5; i++) {\r\n            let id = preferences[i].data.id;\r\n            let response = await axios.get(`https://api.spotify.com/v1/artists/${id}/related-artists`, {\r\n                headers: {\r\n                    'Authorization': \"Bearer \" + this.props.token,\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            let artists = response.data.artists;\r\n            relatedArtists[i] = artists;\r\n        }\r\n\r\n        this.setState({ artists, preferences, relatedArtists });\r\n        await this.callForRecommend();\r\n        return;\r\n    }\r\n\r\n    callForRecommend = async () => {\r\n        const { preferences, select, tracks, sortByNew } = this.state;\r\n\r\n        let copyTracks = [];\r\n        select.forEach((val, i) => {\r\n            if (select[i]) {\r\n                copyTracks.push(tracks[i]);\r\n            }\r\n        });\r\n\r\n        let selectArr = new Array(50).fill(false);\r\n        for (let i = 0; i < copyTracks.length; i++) {\r\n            selectArr[i] = true;\r\n        }\r\n\r\n        let tracksLeft = 50 - copyTracks.length;\r\n        if (tracksLeft === 0) return;\r\n\r\n        let seedBase = `limit=${!sortByNew ? 50 : 85}&`;\r\n        let seedArtist = 'seed_artists=';\r\n        let seedTrack = 'seed_tracks=';\r\n        let changed = false;\r\n\r\n        for (let i = 0; i < 5; i++) {\r\n            if (preferences[i].data != null) {\r\n                changed = true;\r\n                if (preferences[i].type === \"artist\") {\r\n                    seedArtist += preferences[i].data.id;\r\n\r\n                    if (i <= 3) seedArtist += ',';\r\n\r\n                } else if (preferences[i].type === \"track\") {\r\n                    seedTrack += preferences[i].data.id;\r\n\r\n                    if (i <= 3) seedTrack += ',';\r\n                }\r\n            }\r\n        }\r\n\r\n        if (seedArtist !== 'seed_artists=') {\r\n            seedBase += seedArtist;\r\n        }\r\n\r\n        if (seedTrack !== 'seed_tracks=') {\r\n            seedBase += \"&\";\r\n            seedBase += seedTrack;\r\n        }\r\n\r\n        let recRequestURL = SEED_URI + seedBase;\r\n        if (!changed) {\r\n            recRequestURL = `https://api.spotify.com/v1/recommendations?limit=${tracksLeft}&seed_genres=pop`\r\n        }\r\n\r\n        const seed_response = await axios.get(recRequestURL, {\r\n            headers: {\r\n                'Authorization': \"Bearer \" + this.props.token,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        let artistNames = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            artistNames.push(preferences[i].data.name);\r\n        }\r\n\r\n        seed_response.data.tracks.sort((a, b) => b.popularity - a.popularity);\r\n\r\n        for (let i = 0; i < tracksLeft; i++) {\r\n            let track = seed_response.data.tracks[i];\r\n            if (!copyTracks.some(t => t.name.localeCompare(track.name) === 0)) {\r\n                copyTracks.push(track);\r\n            }\r\n            if (sortByNew) {\r\n                if (artistNames.indexOf(track.artists[0].name) < 0) {\r\n                    copyTracks.push(track);\r\n                }\r\n            }\r\n        }\r\n\r\n        let sortByNewTracks = [...seed_response.data.tracks].sort((a, b) => {\r\n            if (artistNames.indexOf(a.artists[0].name) < 0 && artistNames.indexOf(b.artists[0].name) < 0) {\r\n                return a.popularity > b.popularity ? -1 : 1;\r\n            }\r\n            if (artistNames.indexOf(a.artists[0].name) >= 0 && artistNames.indexOf(b.artists[0].name) >= 0) {\r\n                return a.popularity > b.popularity ? -1 : 1;\r\n            }\r\n            if (artistNames.indexOf(a.artists[0].name) >= 0) {\r\n                return 1;\r\n            } else {\r\n                return -1;\r\n            }\r\n        });\r\n\r\n        let tracklisturi = copyTracks.map(t => t.uri);\r\n        this.setState({ tracks: copyTracks, select: selectArr, tracklisturi, newartisttracks: sortByNewTracks });\r\n    }\r\n\r\n    updateSelectedTrack = (track) => {\r\n        this.setState({ selectedTrack: track });\r\n    }\r\n\r\n    updateSearchSeed = (seedStr) => {\r\n        this.setState({ searchSeed: seedStr });\r\n    }\r\n\r\n    updateHoveredObj = (e, index) => {\r\n        if (!e) {\r\n            this.setState({ hovering: null, sample_uri: null, hoverIndex: null });\r\n            return;\r\n        }\r\n        e.preventDefault();\r\n        let objData = {\r\n            sample_uri: e.currentTarget.dataset.sampleUri,\r\n            img: e.currentTarget.children[0].children[1].currentSrc,\r\n            trackName: e.currentTarget.children[0].children[2].children[0].textContent,\r\n            artistName: e.currentTarget.children[0].children[2].children[1].textContent,\r\n        }\r\n        \r\n        this.setState({ hovering: objData, sample_uri: objData.sample_uri, hoverIndex: index });\r\n    }\r\n\r\n    updateTimeRange = async (time_range) => {\r\n        const { type, limit } = this.state;\r\n        const response = await axios.get(`https://api.spotify.com/v1/me/top/${type}?time_range=${time_range}&limit=${limit}&offset=0`, {\r\n            headers: {\r\n                'Authorization': \"Bearer \" + this.props.token,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        const artists = response.data.items;\r\n\r\n        const preferences = {\r\n            0: { data: artists[0], type: 'artist' },\r\n            1: { data: artists[1], type: 'artist' },\r\n            2: { data: artists[2], type: 'artist' },\r\n            3: { data: artists[3], type: 'artist' },\r\n            4: { data: artists[4], type: 'artist' },\r\n        }\r\n\r\n        this.setState({ artists, time_range, preferences });\r\n        this.callForRecommend();\r\n    }\r\n\r\n    updateHoverUri = (sample_uri) => {\r\n        this.setState({ sample_uri });\r\n    }\r\n\r\n    updatePreference = async (preferenceObject, type) => {\r\n        if (this.state.changingPreferenceIndex === null) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < 5; i++) {\r\n            if (preferenceObject.name === this.state.preferences[i].data.name) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        let indexToReplace = this.state.changingPreferenceIndex;\r\n        let preferences = { ...this.state.preferences };\r\n        preferences[indexToReplace] = { data: preferenceObject, type }\r\n\r\n        let response = await axios.get(`https://api.spotify.com/v1/artists/${preferenceObject.id}/related-artists`, {\r\n            headers: {\r\n                'Authorization': \"Bearer \" + this.props.token,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        let currentRelatedArtists = response.data.artists;\r\n        let relatedArtists = { ...this.state.relatedArtists, [this.state.changingPreferenceIndex]: currentRelatedArtists }\r\n\r\n        this.setState(st => ({ preferences, relatedArtists, currentRelatedArtists }));\r\n        this.callForRecommend();\r\n    }\r\n\r\n    setupPreference = (index) => {\r\n        let { changingPreferenceIndex, relatedArtists } = this.state;\r\n\r\n        if (index === changingPreferenceIndex) {\r\n            // this.setState({ changingPreferenceIndex: null, currentRelatedArtists: null });\r\n            return;\r\n        }\r\n\r\n        let currentRelatedArtists = relatedArtists[index];\r\n        this.setState({ changingPreferenceIndex: index, currentRelatedArtists });\r\n    }\r\n\r\n    playSpecificArtist = (uri, artistName) => {\r\n        axios.put('https://api.spotify.com/v1/me/player/play', \r\n        { \"context_uri\": uri} , {\r\n            headers: {\r\n                'Authorization': \"Bearer \" + this.props.token,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        this.setState({ currentPlaying: artistName });\r\n    }\r\n\r\n    playSpecificSong = (uri, songname) => {\r\n        axios.put('https://api.spotify.com/v1/me/player/play', { \"uris\": [uri] }, {\r\n            headers: {\r\n                'Authorization': \"Bearer \" + this.props.token,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        this.setState({ currentPlaying: songname });\r\n    }\r\n\r\n    queueUpSongs = () => {\r\n        axios.put('https://api.spotify.com/v1/me/player/play', \r\n        { \"uris\": this.state.tracklisturi, \"offset\": { \"position\": 0 } } , {\r\n            headers: {\r\n                'Authorization': \"Bearer \" + this.props.token,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n    lockSpecificTrack = (index) => {\r\n        let selectCopy = [...this.state.select];\r\n        selectCopy[index] = !selectCopy[index];\r\n\r\n        this.setState({ select: selectCopy });\r\n    }\r\n\r\n    updateMenu = () => {\r\n        window.removeEventListener('wheel', (e) => {\r\n            this.slide(e.wheelDelta);\r\n        });\r\n        this.setState({ openingMenu: false })\r\n    }\r\n\r\n    updateSortByNew = () => {\r\n        this.setState(st => ({ sortByNew: !st.sortByNew }));\r\n    }\r\n\r\n    render() {\r\n        const { token, deviceId, changePlayerSettings } = this.props;\r\n        const { tracks, newartisttracks, hovering, preferences, sample_uri, changingPreferenceIndex,\r\n            select, hoverIndex, currentPlaying, sortByNew, tracklisturi, openingMenu, showThumb, updateSortByNew, currentRelatedArtists, relatedArtists } = this.state;\r\n\r\n        return (\r\n            <div className=\"app-container\">\r\n                <div className=\"darken\" \r\n                    style={{ background: openingMenu ? '' : 'rgba(0, 0, 0, 0.8)',\r\n                    zIndex: openingMenu ? -1 : 3 }}\r\n                    onClick={e => this.setState({openingMenu: true })} />\r\n                {/* <button onClick={e => this.setState({ openingMenu: true })}></button> */}\r\n                <ChosenPreferences\r\n                    preferences={preferences}\r\n                    changingPreferenceIndex={changingPreferenceIndex}\r\n                    updateMenu={this.updateMenu}\r\n                    setupPreference={this.setupPreference}\r\n                    updatePreference={this.updatePreference}\r\n                    playSpecificArtist={this.playSpecificArtist}\r\n                    currentRelatedArtists={currentRelatedArtists}\r\n                    relatedArtists={relatedArtists}\r\n                    token={token}\r\n                    openingMenu={openingMenu}\r\n                />\r\n                {!openingMenu ? \r\n                    <Thumbnail\r\n                        select={select}\r\n                        sortByNew={sortByNew}\r\n                        token={token}\r\n                        changePlayerSettings={changePlayerSettings}\r\n                        lockSpecificTrack={this.lockSpecificTrack}\r\n                        updateTimeRange={this.updateTimeRange}\r\n                        updateHoveredObj={this.updateHoveredObj}\r\n                        updateSelectedTrack={this.updateSelectedTrack}\r\n                        playSpecificSong={this.playSpecificSong}\r\n                        updatePreference={this.updatePreference}\r\n                        callForRecommend={this.callForRecommend}\r\n                        queueUpSongs={this.queueUpSongs}\r\n                        updateSortByNew={this.updateSortByNew}\r\n                        tracks={tracks}\r\n                        newartisttracks={newartisttracks}\r\n                        deviceId={deviceId}\r\n                        hovering={hovering}\r\n                        hoverIndex={hoverIndex}\r\n                        sampleUri={sample_uri}\r\n                        tracklisturi={tracklisturi}\r\n                    />\r\n                : null }\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport '../StyleSheets/CurrentTrack.css';\r\n\r\nexport default class CurrentTrack extends Component {\r\n\r\n    millisToMinutesAndSeconds = (millis) => {\r\n        var minutes = Math.floor(millis / 60000);\r\n        var seconds = ((millis % 60000) / 1000).toFixed(0);\r\n        return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\r\n    }\r\n\r\n    render() {\r\n\r\n        const { changePlayerSettings, changeCurrentTrackTime, curTrack, playing } = this.props;\r\n\r\n        return (\r\n            curTrack ?\r\n                <div className=\"cur-track-container\">\r\n                    <div className=\"top-container\">\r\n                        <div className=\"cur-track-img-container\">\r\n                        <img className=\"cur-track-img\" src={curTrack.track_window.current_track.album.images[0].url} alt=\"\" />\r\n                        </div>\r\n                        <div className=\"cur-track-name\"> {curTrack.track_window.current_track.name} </div>\r\n                        <div className=\"cur-artist-name\"> {curTrack.track_window.current_track.artists[0].name}</div>\r\n                    </div>\r\n                    <div className=\"button-bar\">\r\n                        <button className=\"control-btn prev-track\" onClick={() => changePlayerSettings('prev')}>\r\n                            <i class=\"fa fa-step-backward\" aria-hidden=\"true\"></i>\r\n                        </button>\r\n                        <button className=\"control-btn toggle-button\" onClick={() => changePlayerSettings('toggle')}>\r\n                            {playing ? \r\n                            <i className=\"fa fa-pause fa-2x\" aria-hidden=\"true\"></i> :\r\n                            <i className=\"fa fa-play play-bar-play fa-lg\" aria-hidden=\"true\" />}\r\n                        </button>\r\n                        <button className=\"control-btn next-button\" onClick={() => changePlayerSettings('next')}>\r\n                            <i class=\"fa fa-step-forward\" aria-hidden=\"true\"></i>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"song-slider\">\r\n                        <span className=\"song-start-time\"> {this.millisToMinutesAndSeconds(curTrack.position)} </span>\r\n                            <input onChange={(e) => changeCurrentTrackTime(e)} type=\"range\" className=\"slider\" min=\"0\" max={`${curTrack.duration}`} value={`${curTrack.position / curTrack.duration}`}></input>\r\n                        <span className=\"song-end-time\"> {this.millisToMinutesAndSeconds(curTrack.duration)} </span>\r\n                    </div>\r\n                </div> : <div></div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../StyleSheets/Navbar.css';\r\n\r\nexport default class Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <div className='navbar-container'>\r\n                <div className=\"logo-name\"> SPOTLUCK </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport queryString from 'query-string';\r\nimport { Redirect } from 'react-router-dom';\r\nimport '../StyleSheets/App.css';\r\n\r\nimport Success from './Success';\r\nimport CurrentTrack from '../Components/CurrentTrack';\r\nimport Navbar from '../Components/Navbar';\r\n\r\nexport default class Landing extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            readyToRedirect: false\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        const search = window.location.hash;\r\n        const hash = queryString.parse(search).access_token;\r\n\r\n        if (hash) {\r\n            await this.props.validateLogin(true, hash);\r\n        } else if (window.location.search === '?error=access_denied') {\r\n            this.setState({ readyToRedirect: true })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { token, deviceId, changePlayerSettings, curTrack, changeCurrentTrackTime, playing } = this.props;\r\n        const { readyToRedirect } = this.state;\r\n\r\n        if (readyToRedirect) {\r\n            this.setState({ readyToRedirect: false})\r\n            return <Redirect to={'/'}/>\r\n        }\r\n\r\n        return (\r\n            <div className=\"root-container\">\r\n                <Navbar />\r\n                <Success changePlayerSettings={changePlayerSettings} deviceId={deviceId} token={token}/>\r\n                <CurrentTrack changeCurrentTrackTime={changeCurrentTrackTime} playing={playing} curTrack={curTrack} changePlayerSettings={changePlayerSettings} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../StyleSheets/Agreement.css';\r\n\r\nexport default class Agreement extends Component {\r\n    render() {\r\n\r\n        const client_id = \"10bb0e9003e748e684be1160d29f3562\"\r\n        const scopes = \"streaming user-read-email user-read-private user-top-read user-modify-playback-state\";\r\n\r\n        return (\r\n            <div style={{ fontSize: '45px' }}>\r\n                <div className=\"agreement-header\"> SPOTLUCK </div>\r\n                <a href={\"https://accounts.spotify.com/authorize\" +\r\n                `?client_id=${client_id}` +\r\n                \"&response_type=token\" +\r\n                \"&redirect_uri=https://danieljaeim.github.io/spotluck/landing\" +\r\n                `&scope=${scopes ? encodeURIComponent(scopes) : ''}`}>\r\n                    CLICK HERE\r\n                </a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport '../StyleSheets/App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Landing from '../Components/Landing';\r\nimport Agreement from '../Components/Agreement';\r\n\r\nexport default class App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loggedIn: false,\r\n      token: null,\r\n      deviceId: \"\",\r\n      position: 0,\r\n      duration: 0,\r\n      playing: true,\r\n      premium: true,\r\n      redirect: false, // BACKBURNER: figure out how to redirect when the user clicks cancel\r\n      curTrack: null\r\n    }\r\n    this.playerCheckInterval = null;\r\n  }\r\n\r\n  checkPlayerInterval = () => {\r\n    if (this.state.token != null) {\r\n      this.setState({ loggedIn: true });\r\n      this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\r\n    }\r\n  }\r\n\r\n  transferPlaybackHere() {\r\n    const { deviceId, token } = this.state;\r\n    fetch(\"https://api.spotify.com/v1/me/player\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        \"device_ids\": [deviceId],\r\n        \"play\": true,\r\n      }),\r\n    });\r\n  }\r\n\r\n  checkForPlayer = () => {\r\n    const { token } = this.state;\r\n\r\n    if (window.Spotify !== null) {\r\n      clearInterval(this.playerCheckInterval);\r\n      this.player = new window.Spotify.Player({\r\n        name: \"Daniel Web Spotify Player\",\r\n        getOAuthToken: cb => { cb(token); },\r\n        volume: 0.3\r\n      });\r\n\r\n      this.player.on('initialization_error', e => { console.error(e); });\r\n      this.player.on('authentication_error', e => {\r\n        this.setState({ loggedIn: false });\r\n\r\n      });\r\n      this.player.on('account_error', e => { console.error(e); });\r\n      this.player.on('playback_error', e => { console.error(e); });\r\n\r\n      // Playback status updates\r\n      this.player.on('player_state_changed', state => {\r\n        this.setState({ curTrack: state })\r\n      });\r\n\r\n      // Ready\r\n      this.player.on('ready', async data => {\r\n        let { device_id } = data;\r\n        console.log(\"Let the music play on!\");\r\n        this.player.setVolume(0.03);\r\n        await this.setState({ deviceId: device_id, premium: true });\r\n        this.transferPlaybackHere();\r\n      });\r\n\r\n      // Connect to the player!\r\n      this.player.connect().then(success => {\r\n        if (success) {\r\n          this.transferPlaybackHere();\r\n          console.log(\"The Web Player successfully connected to Spotify!\")\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  changePlayerSettings = async (control) => {\r\n    switch (control) {\r\n      case ('pause'):\r\n        this.setState({ playing: false })\r\n        this.player.pause();\r\n        break;\r\n      case ('toggle'):\r\n        this.setState(st => ({ playing: !st.playing }))\r\n        this.player.togglePlay();\r\n        break;\r\n      case ('next'):\r\n        this.player.nextTrack();\r\n        break;\r\n      case ('previous'):\r\n        this.player.previousTrack();\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  changeCurrentTrackTime = (e) => {\r\n    e.preventDefault();\r\n    this.player.seek(e.target.value);\r\n  }\r\n\r\n  getPlayerState = async () => {\r\n    return this.player.getCurrentState;\r\n  }\r\n\r\n  validateLogIn = async (validated, token) => {\r\n    if (validated) {\r\n      await this.setState({ token });\r\n      this.checkPlayerInterval();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { loggedIn, redirect, token, deviceId, curTrack, playing } = this.state;\r\n\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/landing\">\r\n            <Landing changeCurrentTrackTime={this.changeCurrentTrackTime} curTrack={curTrack} playing={playing} changePlayerSettings={this.changePlayerSettings} deviceId={deviceId} token={token} redirect={redirect} loggedIn={loggedIn} validateLogin={this.validateLogIn} />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Agreement />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    )\r\n\r\n  }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}